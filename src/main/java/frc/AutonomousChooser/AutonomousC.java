package frc.AutonomousChooser;

//import edu.wpi.first.wpilibj.CameraServer;
//import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DriverStation;
//import edu.wpi.first.wpilibj.IterativeRobot;
//import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
//import edu.wpi.first.wpilibj.command.Scheduler;
//import edu.wpi.first.wpilibj.command.Subsystem;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

//import frc.robot.commands.*;
import frc.robot.autoCommands.*;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class AutonomousC {
	//SendableChooser<CommandGroup> m_autoChooserLeft;
	//SendableChooser<CommandGroup> m_autoChooserRight;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	//
	// AUTONOMOUS VARIABLES
	//
    CommandGroup m_autonomousCommand;
	public CommandGroup[] m_autonomousCommandArray;
	
	//-----------------------------------------------------------
	//THOSE VALUES WILL NEED TO CHANGE WHEN CREATING A NEW ROBOT
	public final Boolean USEGAMEDATA = false; //True = take the gamedata value from the driver station; False = uses a SendableChooser to get the data
	
	public final int AUTOCHOOSER_NB_OBJECTIVE          = 2; //The amount of things the robot has to do
	public final int AUTOCHOOSER_NB_GAMEDATA           = 4; //the amount of possible gamedata.
	public final int AUTOCHOOSER_NB_POSITION           = 3; //the amount of starting positions + 1 the robot can take
	//---------------------------------------------------------------
	public final int AUTOCHOOSER_NB_TOTAL              = AUTOCHOOSER_NB_POSITION * AUTOCHOOSER_NB_GAMEDATA * AUTOCHOOSER_NB_OBJECTIVE;
	
	public final int AUTOCHOOSER_POSITION_ENCODER      = AUTOCHOOSER_NB_OBJECTIVE*AUTOCHOOSER_NB_GAMEDATA; //Le nombre multiplier par la position pour le selecteur d'autonomous
	public final int AUTOCHOOSER_GAMEDATA_ENCODER = AUTOCHOOSER_NB_OBJECTIVE;  //Le nombre multiplier par la couleur pour le selecteur d'autonomous
	public final int AUTOCHOOSER_OBJECTIVE_ENCODER     = 1; //Le nombre multiplier par l'objectif pour le selecteur d'autonomous 
	
    public SendableChooser<Integer> PositionRobotAuto;
	public SendableChooser<Integer> ActionAutonome;
	public SendableChooser<Integer> GameData;
	public SendableChooser<CommandGroup> CommandeBrutAuto;

    public int CoteBasculeAuto;
	public int CoteBalanceAuto;

	
	public void installAutonomous() { //This has all of the SendableChooser
		//
		// Sets the autonomous commands to be ready for use
		//
        m_autonomousCommandArray = new CommandGroup[AUTOCHOOSER_NB_TOTAL];
		autonomousCommandArrayInit();

		SmartDashboard.putNumber("NB Total", AUTOCHOOSER_NB_TOTAL);
		SmartDashboard.putNumber("Max Value", calcID(2,3,1));
		SmartDashboard.putNumber("Error value", calcID(2,0,1));

		
		// YOU NEED TO CHANGE (or at least rename) ALL SENDABLECHOOSER WHEN CREATING A NEW ROBOT

		// > Starting position < combobox
        PositionRobotAuto = new SendableChooser<>();
        
		PositionRobotAuto.addDefault("OverrideCommandeManuel", (Integer)(0 * AUTOCHOOSER_POSITION_ENCODER));
		PositionRobotAuto.addObject ("position 1",             (Integer)(1 * AUTOCHOOSER_POSITION_ENCODER));
		PositionRobotAuto.addObject ("position 2",             (Integer)(2 * AUTOCHOOSER_POSITION_ENCODER));
		//PositionRobotAuto.addObject ("position 3",             (Integer)(3 * AUTOCHOOSER_POSITION_ENCODER));
		//PositionRobotAuto.addObject ("position 4",             (Integer)(4 * AUTOCHOOSER_POSITION_ENCODER));
		
		SmartDashboard.putData("Position robot autonome", PositionRobotAuto);
		
		// > GameData < combobox
		if (!USEGAMEDATA) { //this will only show if we don't take the game data from the game
			GameData = new SendableChooser<>();

			GameData.addDefault("Configuration de terrain 1", 0 * AUTOCHOOSER_GAMEDATA_ENCODER);
			GameData.addObject("Configuration de terrain 2", 1 * AUTOCHOOSER_GAMEDATA_ENCODER);
			GameData.addObject("Configuration de terrain 3", 2 * AUTOCHOOSER_GAMEDATA_ENCODER);
			GameData.addObject("Configuration de terrain 4", 3 * AUTOCHOOSER_GAMEDATA_ENCODER);

			SmartDashboard.putData("Game Data Manuel", GameData);
		}

		// > Objective < combobox
		ActionAutonome = new SendableChooser<>();
		
		ActionAutonome.addDefault("Rien Faire",                (Integer)(0  * AUTOCHOOSER_OBJECTIVE_ENCODER));
		ActionAutonome.addObject("Tourne à droite",                 (Integer)(1  * AUTOCHOOSER_OBJECTIVE_ENCODER));
		//ActionAutonome.addObject("Bascule",            (Integer)(2  * AUTOCHOOSER_OBJECTIVE_ENCODER));
		//ActionAutonome.addObject("Bascule special", (Integer)(3  * AUTOCHOOSER_OBJECTIVE_ENCODER));
		//ActionAutonome.addObject("balance",            (Integer)(4  * AUTOCHOOSER_OBJECTIVE_ENCODER));
		//ActionAutonome.addObject("Autre action",      (Integer)(5  * AUTOCHOOSER_OBJECTIVE_ENCODER));
		// Add if need more
		
		SmartDashboard.putData("Objectif autonome", ActionAutonome);
		
		// Auto Commands MANUAL combobox
		CommandeBrutAuto = new SendableChooser<>();
		
		// **FAIRE HYPER ATTENTION D'AVOIR LE BON INDEX EN MODIFIANT/RAJOUTANT DES COMMANDES** 
		
		CommandeBrutAuto.addDefault("Ne fais rien",
				                    m_autonomousCommandArray[calcID(0, 0, 1)]);
		//CommandeBrutAuto.addDefault("Ne fais rien",
		//		new TwoCubeEasy(FROM_RIGHT_PORTAL.SCALE_RIGHT_TRAVEL, FROM_RIGHT_PORTAL.SCALE_RIGHT_FINISH, FROM_RIGHT_PORTAL.SCALE_RIGHT_FINISH, -90, 0.60, 0.50));
				
		// Tourne a droite (Objective #1)
		CommandeBrutAuto.addObject ("Tourner à droite",
		                            m_autonomousCommandArray[calcID(1, 0, 1)]);
		
		/*
		//Cube dans la Bascule (Objective #2 et special #3)
		CommandeBrutAuto.addObject ("Bascule @ bascule Gauche @ Pos 1", 
		                            m_autonomousCommandArray[calcID(1, 0, 2)]); 
		CommandeBrutAuto.addObject ("Bascule @ bascule Gauche @ Pos 2a", 
		                            m_autonomousCommandArray[calcID(2, 0, 2)]);
		CommandeBrutAuto.addObject ("Bascule @ bascule Gauche @ Pos 2b", 
		                            m_autonomousCommandArray[calcID(2, 0, 3)]);
		CommandeBrutAuto.addObject ("Bascule @ bascule Gauche @ Pos 3", 
		                            m_autonomousCommandArray[calcID(3, 0, 2)]);
		CommandeBrutAuto.addObject ("Bascule @ bascule Gauche @ Pos 4", 
		                            m_autonomousCommandArray[calcID(4, 0, 2)]);
									
		CommandeBrutAuto.addObject ("Bascule @ bascule Droite @ Pos 1", 
		                            m_autonomousCommandArray[calcID(1, 1, 2)]); 
		CommandeBrutAuto.addObject ("Bascule @ bascule Droite @ Pos 2a", 
		                            m_autonomousCommandArray[calcID(2, 1, 2)]);
		CommandeBrutAuto.addObject ("Bascule @ bascule Droite @ Pos 2b", 
		                            m_autonomousCommandArray[calcID(2, 1, 3)]);
		CommandeBrutAuto.addObject ("Bascule @ bascule Droite @ Pos 3", 
		                            m_autonomousCommandArray[calcID(3, 1, 2)]);
		CommandeBrutAuto.addObject ("Bascule @ bascule Droite @ Pos 4", 
		                            m_autonomousCommandArray[calcID(4, 1, 2)]);
		
		// Cube dans la Balance (Objective #4)
		CommandeBrutAuto.addObject ("Balance @ balance Gauche @ Pos 1", 
		                            m_autonomousCommandArray[calcID(1, 0, 4)]); 
		CommandeBrutAuto.addObject ("Balance @ balance Gauche @ Pos 2", 
		                            m_autonomousCommandArray[calcID(2, 0, 4)]);
		CommandeBrutAuto.addObject ("Balance @ balance Gauche @ Pos 3", 
		                            m_autonomousCommandArray[calcID(3, 0, 4)]);
		CommandeBrutAuto.addObject ("Balance @ balance Gauche @ Pos 4", 
		                            m_autonomousCommandArray[calcID(4, 0, 4)]);
		
		CommandeBrutAuto.addObject ("Balance @ balance Droite @ Pos 1", 
		                            m_autonomousCommandArray[calcID(1, 2, 4)]); 
		CommandeBrutAuto.addObject ("Balance @ balance Droite @ Pos 2", 
		                            m_autonomousCommandArray[calcID(2, 2, 4)]);
		CommandeBrutAuto.addObject ("balance @ balance Droite @ Pos 3", 
		                            m_autonomousCommandArray[calcID(3, 2, 4)]);
		CommandeBrutAuto.addObject ("balance @ balance Droite @ pos 4", 
		                            m_autonomousCommandArray[calcID(4, 2, 4)]);
		
		//action 5...
		//CommandeBrutAuto.addObject ("action 5 @ bascule gauche balance gauche @ Pos 1", 
		//                            m_autonomousCommandArray[calcID(1, 0, 5)]); 
		*/
		
		SmartDashboard.putData("Selection Autonomes", CommandeBrutAuto);
	}
	
	
	public void chooseAutonomous() {
		
		
		 //Retrieve selected choices for the autonomous command
   	    CommandGroup CommandeBrutAutoCommand = (CommandGroup)CommandeBrutAuto.getSelected();
		int PositionRobotAutoIndex      = (Integer)PositionRobotAuto.getSelected();
		int ActionAutonomeIndex         = (Integer)ActionAutonome.getSelected();
		int GameDataValue;
		
		if (USEGAMEDATA) { //It will only check the GameData if we use it.
			//THIS PART HAS TO BE UPDATED MANUALLY, AS GAMEDATA CAN HAVE DIFFERENTS MEANINGS DEPENDING ON THE COMPETITION
			String tempGameData = DriverStation.getInstance().getGameSpecificMessage();
			int CoteBasculeAuto = 0;  // Default 0 = 'L'
			if (tempGameData.charAt(0) == 'R')
			{
				CoteBasculeAuto = 1;
			}
			//
			int CoteBalanceAuto = 0;  // Default 0 = 'L'
			if (tempGameData.charAt(1) == 'R')
			{
				CoteBalanceAuto = 2;
			}
			GameDataValue = (CoteBasculeAuto + CoteBalanceAuto) * AUTOCHOOSER_GAMEDATA_ENCODER;
		} else {
			GameDataValue = (Integer)GameData.getSelected();
		}
		//
		// Selecting desired autonomous command
		//
        if (PositionRobotAutoIndex != 0) // Pas ManualOveride...
		{
   		    // Combine values to retrieve Command id
			int commandIndex = PositionRobotAutoIndex + ActionAutonomeIndex + GameDataValue;
			System.out.println("Combining posindex= "+ PositionRobotAutoIndex + 
					           " + obj= " + ActionAutonomeIndex + " + cotes= " + GameDataValue + 
					           " into " + commandIndex);
			SmartDashboard.putNumber ("commandIndex", commandIndex);
			SmartDashboard.putNumber ("PositionRobotAutoIndex", PositionRobotAutoIndex);
			SmartDashboard.putNumber ("ActionAutonomeIndex", ActionAutonomeIndex); 
			SmartDashboard.putNumber ("configurationCotes", GameDataValue);
			m_autonomousCommand = m_autonomousCommandArray[commandIndex];
			SmartDashboard.putNumber ("commandIndex", commandIndex);
		}
		else if (PositionRobotAutoIndex == 0 && CommandeBrutAutoCommand != null ) 
		{
			m_autonomousCommand = CommandeBrutAutoCommand;
		}
		else 
		{
			System.out.println("An impossible error occurred at the Autonomous Command Choosing step");
			System.out.println("Setting autonomousCommand null");
			//System.out.println("But really, please find the impossible error and fix it!");
			System.out.println("This error means that CommandeBrutAutoCommand or ActionAutonomeIndex is equals to null");
			System.out.println("This error is in AutonomousC.java");
			//System.out.println("Hopes that help fixing the _impossible_ error... ~Nathan");
			//System.out.println("And yes, I have too much time on my hand");
		}
		
		//
		//
		//
		if (m_autonomousCommand != null)
		{
			System.out.println("Starting Action");
			m_autonomousCommand.start();
		}
		else
		{
		    System.out.println("Not an existing action");
		}
	}
	
	public CommandGroup getCommandGroup() {
		return m_autonomousCommand;
	}
	
	public void cancelAutonomous() {
		m_autonomousCommand.cancel();
	}
		
	public int calcID(int position, int GameDataConfig, int objective)
	{
		return (position * AUTOCHOOSER_POSITION_ENCODER) + (GameDataConfig * AUTOCHOOSER_GAMEDATA_ENCODER) + (objective * AUTOCHOOSER_OBJECTIVE_ENCODER);
	}
	
	public void autonomousCommandArrayInit() //this is where the m_autonomousCommandArray gets its values, it is CRUCIAL to update it well
	{
		m_autonomousCommandArray[calcID(0, 0, 1)] = new NeRienFaireCommandGroup();
		
		//
		// IN SAME ORDER AS IN THE EXCEL STRATEGIC PLAN
		//
		


		//calcID fonctionne de cette facon : (position, GameDataConfig, objective)


		//calcID(Positon = 1, GameData is pair, objective = 1)
		m_autonomousCommandArray[calcID(1, 0, 1)] = new PosXGmXObjTournerADroite(1.5 , -0.4, 0, 2 , -0.4, 0.5);
		m_autonomousCommandArray[calcID(1, 2, 1)] = m_autonomousCommandArray[calcID(1, 0, 1)];
		
		//calcID(Positon = 2, GameData is pair, objective = 1)
		m_autonomousCommandArray[calcID(2, 0, 1)] = m_autonomousCommandArray[calcID(1, 0, 1)]; // Not used
		m_autonomousCommandArray[calcID(2, 2, 1)] = m_autonomousCommandArray[calcID(1, 0, 1)]; // Not used
		
		//calcID(Positon = 3, GameData is pair, objective = 1)
		//m_autonomousCommandArray[calcID(3, 0, 1)] = m_autonomousCommandArray[calcID(1, 0, 1)];
		//m_autonomousCommandArray[calcID(3, 2, 1)] = m_autonomousCommandArray[calcID(1, 0, 1)];
		
		//calcID(Positon = 4, GameData is pair, objective = 1)
		//m_autonomousCommandArray[calcID(4, 0, 1)] = m_autonomousCommandArray[calcID(1, 0, 1)];
		//m_autonomousCommandArray[calcID(4, 2, 1)] = m_autonomousCommandArray[calcID(1, 0, 1)];
		
		//calcID(Positon = 1, GameData isn't pair, objective = 1)
		m_autonomousCommandArray[calcID(1, 1, 1)] = m_autonomousCommandArray[calcID(1, 0, 1)];
		m_autonomousCommandArray[calcID(1, 3, 1)] = m_autonomousCommandArray[calcID(1, 0, 1)];
		
		//calcID(Positon = 2, GameData isn't pair, objective = 1)
		m_autonomousCommandArray[calcID(2, 1, 1)] = m_autonomousCommandArray[calcID(1, 0, 1)]; // Not used
		m_autonomousCommandArray[calcID(2, 3, 1)] = m_autonomousCommandArray[calcID(1, 0, 1)]; // Not used
		
		//calcID(Positon = 3, GameData isn't pair, objective = 1)
		//m_autonomousCommandArray[calcID(3, 1, 1)] = m_autonomousCommandArray[calcID(1, 0, 1)];
		//m_autonomousCommandArray[calcID(3, 3, 1)] = m_autonomousCommandArray[calcID(1, 0, 1)];
		
		//calcID(Positon = 4, GameData isn't pair, objective = 1)
		//m_autonomousCommandArray[calcID(4, 1, 1)] = m_autonomousCommandArray[calcID(1, 0, 1)];
		//m_autonomousCommandArray[calcID(4, 3, 1)] = m_autonomousCommandArray[calcID(1, 0, 1)];
		//
		//

		/*
		m_autonomousCommandArray[calcID(1, 0, 2)] = new Pos1ColorLeftObjCubeBasculeCommand();
		m_autonomousCommandArray[calcID(1, 2, 2)] = m_autonomousCommandArray[calcID(1, 0, 2)];
		//
		m_autonomousCommandArray[calcID(2, 0, 2)] = new Pos2ColorLeftObjCubeBascule1Command();
		m_autonomousCommandArray[calcID(2, 2, 2)] = m_autonomousCommandArray[calcID(2, 0, 2)];
		m_autonomousCommandArray[calcID(2, 0, 3)] = new Pos2ColorLeftObjCubeBascule2Command();
		m_autonomousCommandArray[calcID(2, 2, 3)] = m_autonomousCommandArray[calcID(2, 0, 3)];
		//
		m_autonomousCommandArray[calcID(3, 0, 2)] = new Pos3ColorLeftObjCubeBasculeCommand();
		m_autonomousCommandArray[calcID(3, 2, 2)] = m_autonomousCommandArray[calcID(3, 0, 2)];
		//
		m_autonomousCommandArray[calcID(4, 0, 2)] = new Pos4ColorLeftObjCubeBasculeCommand();
		m_autonomousCommandArray[calcID(4, 2, 2)] = m_autonomousCommandArray[calcID(4, 0, 2)];
		//
		m_autonomousCommandArray[calcID(1, 1, 2)] = new Pos1ColorRightObjCubeBasculeCommand();
		m_autonomousCommandArray[calcID(1, 3, 2)] = m_autonomousCommandArray[calcID(1, 1, 2)];
		//
		m_autonomousCommandArray[calcID(2, 1, 2)] = new Pos2ColorRightObjCubeBascule1Command();
		m_autonomousCommandArray[calcID(2, 3, 2)] = m_autonomousCommandArray[calcID(2, 1, 2)];
		m_autonomousCommandArray[calcID(2, 1, 3)] = new Pos2ColorRightObjCubeBascule2Command();
		m_autonomousCommandArray[calcID(2, 3, 3)] = m_autonomousCommandArray[calcID(2, 1, 3)];
		//
		m_autonomousCommandArray[calcID(3, 1, 2)] = new Pos3ColorRightObjCubeBasculeCommand();
		m_autonomousCommandArray[calcID(3, 3, 2)] = m_autonomousCommandArray[calcID(3, 1, 2)];
		//
		m_autonomousCommandArray[calcID(4, 1, 2)] = new Pos4ColorRightObjCubeBasculeCommand();
		m_autonomousCommandArray[calcID(4, 3, 2)] = m_autonomousCommandArray[calcID(4, 1, 2)];
		//
		//
		m_autonomousCommandArray[calcID(1, 0, 4)] = new Pos1ColorLeftObjCubeBalanceCommand();
		m_autonomousCommandArray[calcID(1, 1, 4)] = m_autonomousCommandArray[calcID(1, 0, 4)];
		//
		//m_autonomousCommandArray[calcID(2, 0, 4)] = new DummyCommand(2);                     // Not used
		//m_autonomousCommandArray[calcID(2, 1, 4)] = m_autonomousCommandArray[calcID(2, 0, 4)]; // Not used
		//
		//m_autonomousCommandArray[calcID(3, 0, 4)] = new DummyCommand(3);                     // Not used
		//m_autonomousCommandArray[calcID(3, 1, 4)] = m_autonomousCommandArray[calcID(3, 0, 4)]; // Not used
		//
		m_autonomousCommandArray[calcID(4, 0, 4)] = new Pos4ColorLeftObjCubeBalanceCommand();
		m_autonomousCommandArray[calcID(4, 1, 4)] = m_autonomousCommandArray[calcID(4, 0, 4)];
		//
		m_autonomousCommandArray[calcID(1, 2, 4)] = new Pos1ColorRightObjCubeBalanceCommand();
		m_autonomousCommandArray[calcID(1, 3, 4)] = m_autonomousCommandArray[calcID(1, 2, 4)];
		//
		//m_autonomousCommandArray[calcID(2, 2, 4)] = new DummyCommand(2);                     // Not used
		//m_autonomousCommandArray[calcID(2, 3, 4)] = m_autonomousCommandArray[calcID(2, 2, 4)]; // Not used
		//
		//m_autonomousCommandArray[calcID(3, 2, 4)] = new DummyCommand(3);                     // Not used
		//m_autonomousCommandArray[calcID(3, 3, 4)] = m_autonomousCommandArray[calcID(3, 2, 4)]; // Not used
		//
		m_autonomousCommandArray[calcID(4, 2, 4)] = new Pos4ColorRightObjCubeBalanceCommand();
		m_autonomousCommandArray[calcID(4, 3, 4)] = m_autonomousCommandArray[calcID(4, 2, 4)];
		*/
	}
}